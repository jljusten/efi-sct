#/*++
#
# Copyright (c) 2005, Intel Corporation
# All rights reserved. This program and the accompanying materials
# are licensed and made available under the terms and conditions of the Eclipse Public License
# which accompanies this distribution.  The full text of the license may be found at
# http://www.opensource.org/licenses/eclipse-1.0.php
#
# THE PROGRAM IS DISTRIBUTED UNDER THE ECLIPSE PUBLIC LICENSE (EPL) ON AN "AS IS" BASIS,
# WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
#
# Module Name:
#
#   PlatformTools.env
#
# Abstract:
#
#   This file is used to define IA32 platforms specific environment variables.
#   It gets included by every makefile.
#
#--*/

#
# Set the project name
#
PROJECT_NAME    = Ia32
PROJECT_FAMILY  = IntelTest

#
# Define all the platform specific build flags, YES or NO, case sensitive.
#
EFI_DEBUG                       = YES
EFI_DEBUG_CLEAR_MEMORY          = YES

EFI_SPECIFICATION_VERSION       = 0x0001000A
TIANO_RELEASE_VERSION           = 0x00080006

#
# Make sure you update EBC_TOOLS_PATH, WIN_DDK_IPF_PATH, and WIN_DDK_X64_PATH
#  match the location of the compilers and tools on your system.
#

#
# Specify the root install directory of the Intel EBC compiler
#
EBC_TOOLS_PATH      = c:\progra~1\intel\ebc

#
# Specify path to Win DDK if building for IPF
#
WIN_DDK_IPF_PATH    = c:\WINDDK\3790\bin\win64\x86

#
# Specify path to Win DDK if building for x64 (also called x86-64, EM64T, AMD64)
#
WIN_DDK_X64_PATH    = c:\WINDDK\3790\bin\win64\x86\amd64



#
# Point to our base build directory
#
BUILD_DIR           = $(EFI_SOURCE)\Platform\$(PROJECT_FAMILY)\$(PROJECT_NAME)\Build
EDK_SOURCE          = $(EFI_SOURCE)\EDK
EDK_TOOLS_SOURCE    = $(EDK_SOURCE)\Sample\Tools\Source
EDK_TOOLS_COMMON    = $(EDK_TOOLS_SOURCE)\Common
EDK_TOOLS_OUTPUT    = $(BUILD_DIR)\Tools

SHELL_SOURCE        = $(EFI_SOURCE)\EDK\Other\Maintained\Application\Shell

TEST_TOOLS_SOURCE   = $(EFI_SOURCE)\Platform\$(PROJECT_FAMILY)\Tools\Source
TEST_TOOLS_OUTPUT   = $(BUILD_DIR)\Tools

#
# Specify where the build process should put your PDB files.
# Shorten this path to make your images a bit smaller.
#
PDB_OUTPUT_PATH     = $(BUILD_DIR)\$(PROCESSOR)

#
# Macros to define the build tools
#
ANTLR           = $(PCCTS_DIR)\bin\antlr
DLG             = $(PCCTS_DIR)\bin\dlg
FWIMAGE         = $(EDK_TOOLS_OUTPUT)\FwImage
GENDEPEX        = $(EDK_TOOLS_OUTPUT)\GenDepex
GENFFSFILE      = $(EDK_TOOLS_OUTPUT)\GenFfsFile
GENFVIMAGE      = $(EDK_TOOLS_OUTPUT)\GenFvImage
GENSECTION      = $(EDK_TOOLS_OUTPUT)\GenSection
GUIDCHK         = $(EDK_TOOLS_OUTPUT)\GuidChk
MAKEDEPS        = $(EDK_TOOLS_OUTPUT)\MakeDeps
PROCESSDSC      = $(EDK_TOOLS_OUTPUT)\ProcessDsc
STRGATHER       = $(EDK_TOOLS_OUTPUT)\StrGather
SETSTAMP        = $(EDK_TOOLS_OUTPUT)\SetStamp
VFRCOMPILE      = $(EDK_TOOLS_OUTPUT)\VfrCompile

GENBIN          = $(TEST_TOOLS_OUTPUT)\GenBin

MAKE            = nmake -nologo


###############################################################################
#
# Settings for building drivers for IA32 using MS Visual Studio.
#
# These VC++ tools settings are used to build drivers for IA32 using MS Visual C.
#  this path assumes you have run VCVARS32.BAT and the MSVS tools are in your
#  path.
#
###############################################################################
!IF "$(TOOLCHAIN)" == "TOOLCHAIN_MSVC_IA32"

CC                  = cl
LINK                = link
LIB                 = link /lib
ASM                 = ml
ASMLINK             = $(LINK)

CC_FLAGS            = /nologo /X /D EFI32 /W4 /WX /GX /Gy /c /Fo$@ $(INC)
ASM_FLAGS           = /nologo /W3 /WX /c /coff /Fo$@ /DEFI32 $(INC)
LINK_FLAGS          = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF /MACHINE:I386 /DLL
LIB_FLAGS           = /NOLOGO

#
# Set additional build flags for compiler/assembler/linker when debug is enabled
#
!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) /Zi /DDEBUG
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm /D EFI_DEBUG
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
!ENDIF

VERSION_FLAGS       = /D EFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) \
                      /D TIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
CC_FLAGS            = $(CC_FLAGS) $(VERSION_FLAGS)

###############################################################################
#
# Settings for MS Visual Studio when building the Tiano build tools.
#  this path assumes you have run VCVARS32.BAT and the MSVS tools are in your
#  path.
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_MSVC"

CC                  = cl
LINK                = link
LIB                 = link /lib
LIB_EXE             = lib

CC_FLAGS            = /nologo /W4 /WX /GX /Gy /c /Fo$@
ASM_FLAGS           = /nologo /W3 /WX /c /coff /Fo$@
LINK_FLAGS          = /NOLOGO /SUBSYSTEM:CONSOLE /IGNORE:4086 /MAP /OPT:REF
LIB_FLAGS           = /NOLOGO

#
# Set additional build flags for compiler/assembler/linker when debug is enabled.
# We'll always build the build tools with debug turned on so we can debug the
# tool if something fails.
#
#!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) /Zi /DDEBUG
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
#!ENDIF

VERSION_FLAGS       = /D EFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) \
                      /D TIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
CC_FLAGS            = $(CC_FLAGS) $(VERSION_FLAGS)

#
# These are typically set by the vsvars32.bat file that is created when Visual Studio
# is installed.
#
!IFNDEF VCINSTALLDIR
VCINSTALLDIR=C:\Program Files\Microsoft Visual Studio .NET 2003
!ENDIF

INC = -I $(EDK_SOURCE)\Foundation                          \
      -I $(EDK_SOURCE)\Foundation\Efi                      \
      -I $(EDK_SOURCE)\Foundation\Framework                \
      -I $(EDK_SOURCE)\Foundation\Core\Dxe                 \
      -I $(EDK_SOURCE)\Foundation\Include                  \
      -I $(EDK_SOURCE)\Foundation\Efi\Include              \
      -I $(EDK_SOURCE)\Foundation\Framework\Include        \
      -I $(EDK_SOURCE)\Foundation\Include\IndustryStandard \
      -I $(EDK_SOURCE)\Foundation\Include\Ia32             \
      -I $(EDK_SOURCE)\Foundation\Include\Pei              \
      -I $(EDK_SOURCE)\Foundation\Library\Pei\Include      \
      -I $(EDK_SOURCE)\Sample\Include                      \
      -I "$(EDK_TOOLS_COMMON)"

#
# Why?
#
INC = $(INC) -I $(EDK_SOURCE)\Sample\Platform\Nt32

CUSTOMIZEDCOMPRESS_MAKEFILE = $(EDK_TOOLS_SOURCE)\CustomizedCompress\Makefile

CC_FLAGS = $(CC_FLAGS) $(INC)

#
# Set paths to libraries for linking
#
LIBPATH = /LIBPATH:"$(VCINSTALLDIR)\VC7\Lib"
LIBPATH = $(LIBPATH) /LIBPATH:"$(VCINSTALLDIR)\Vc7\PlatformSDK\Lib"

#
# For backwards compatibility with the build tools
#
LINK_FLAGS = $(LINK_FLAGS) $(LIBPATH)
MSVS_LINK_LIBPATHS = $(LIBPATH)
L_FLAGS = $(LINK_FLAGS)

# Should fix GenFvImage to not do a lib -- then we can remove this
LIB_FLAGS = $(LIB_FLAGS) $(LIBPATH)

EDK_TOOLS_DIR     = $(EDK_SOURCE)\Sample\Tools
EDK_TOOLS_SOURCE  = $(EDK_TOOLS_DIR)\Source
EDK_TOOLS_OUTPUT  = $(BUILD_DIR)\Tools
PCCTS_DIR         = $(EDK_SOURCE)\Other\Maintained\Tools\Pccts

TIANO_TOOLS_OUTPUT = $(EDK_TOOLS_OUTPUT)

#
# Make up some bogus stuff because the Tools makefile tries to copy whatever
#
EDK_TOOLS_BIN = c:\xxxxxxx
EFI_TOOLS_BIN = $(EDK_TOOLS_BIN)

###############################################################################
#
# Settings for using Intel EBC compiler and MS Visual Studio linker when
# building drivers for EBC.
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_INTEL_EBC"

#
# EBC_TOOLS_PATH should be defined above. Use the MS linker for link/lib
#
CC          = $(EBC_TOOLS_PATH)\Bin\Iec
LINK        = link
LIB         = link /lib

CC_FLAGS    = -nologo -FAcs -c -W3 -WX
LINK_FLAGS  = /NOLOGO /MACHINE:EBC /OPT:REF /NODEFAULTLIB
LIB_FLAGS   = /NOLOGO /MACHINE:EBC

#
# For source-level debug support
#
!IF "$(EFI_DEBUG)" == "YES"
CC_FLAGS    = $(CC_FLAGS) /Zd /Zi
LINK_FLAGS  = $(LINK_FLAGS) /DEBUG
!ENDIF

VERSION_FLAGS       = /D EFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) \
                      /D TIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
CC_FLAGS            = $(CC_FLAGS) $(VERSION_FLAGS)

CC_FLAGS = $(CC_FLAGS) $(INC)

###############################################################################
#
# Specify the path and macros for the x64 (also called x86-64, EM64T, AMD64) tools
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_MSDDK_X64"

CC                  = $(WIN_DDK_X64_PATH)\cl
LINK                = $(WIN_DDK_X64_PATH)\link
LIB                 = $(WIN_DDK_X64_PATH)\lib
ASM                 = $(WIN_DDK_X64_PATH)\ml64
ASMLINK             = $(WIN_DDK_X64_PATH)\link

CC_FLAGS            = /nologo /X /D EFIx64 /W4 /WX /Gy /c /Gs8192 /GS- /Fo$@ $(INC)
ASM_FLAGS           = /nologo /W3 /WX /c /Fo$@ /DEFI32 $(INC)
LINK_FLAGS          = /NOLOGO /Machine:AMD64 /DLL /NODEFAULTLIB /OPT:REF
LIB_FLAGS           = /NOLOGO

#
# Set additional build flags for compiler/assembler/linker when debug is enabled
#
!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) /Zi /DDEBUG
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm /D EFI_DEBUG
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
!ENDIF

VERSION_FLAGS       = /D EFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) \
                      /D TIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
CC_FLAGS            = $(CC_FLAGS) $(VERSION_FLAGS)

###############################################################################
#
# Microsoft DDK toolchain for IPF targets
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_MSDDK_IPF"
#
# Define executables for IPF builds
#
CC                = $(WIN_DDK_IPF_PATH)\cl
LINK              = $(WIN_DDK_IPF_PATH)\link
LIB               = $(WIN_DDK_IPF_PATH)\lib
ASM               = $(WIN_DDK_IPF_PATH)\ias
ASMLINK           = $(WIN_DDK_IPF_PATH)\link
#
# Define build flags for IPF driver builds
#
CC_FLAGS              = /nologo /X /W4 /WX /GX /Gy /c /Fo$@ /D EFI_MONOSHELL /D EFI64 $(INC)
ASM_FLAGS             = -N us -X explicit -M ilp64 -N so -W4 -o $@ $(INC)
LINK_FLAGS            = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF /MACHINE:IA64 /DLL
LIB_FLAGS             = /NOLOGO
ASL_CPP_FLAGS         = /nologo /C /EP /TC $(INC)
#
# For additional compiler debug output files
#
#CC_FLAGS             = $(CC_FLAGS) /Fa$* /FAsc /Fo$@ /FR$(@R).SBR
#
# This is used for preprocessing IPF Assembly files
#
CC_PP_FLAGS       = -EP -C $(CC_FLAGS)

!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) -d debug
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
!ENDIF

VERSION_FLAGS       = /D EFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) \
                      /D TIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
CC_FLAGS            = $(CC_FLAGS) $(VERSION_FLAGS)

###############################################################################
#
# Undefined/other toolchains
#
###############################################################################
!ELSE
#
# The main platform makefile may include this file without setting the
# toolchain, which is ok. However if it is set, and we're here, then
# it's not supported.
#
!IF "$(TOOLCHAIN)" != ""
!ERROR Toolchain $(TOOLCHAIN) not supported by PlatformTools.env
!ENDIF
!ENDIF


#
# For backward compatibility
#
C_FLAGS         = $(CC_FLAGS)

#
# For backward compatability with *.inf files that change flags
#
CC_FLAGS = $(CC_FLAGS) $(C_STD_FLAGS) $(C_PROJ_FLAGS)

